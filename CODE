#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Book {
public:
    string title;
    string author;
    int id;

    Book(int id, const string& title, const string& author) 
        : id(id), title(title), author(author) {}
};

class Library {
private:
    vector<Book> books;
    int nextId;

public:
    Library() : nextId(1) {}

    void addBook(const string& title, const string& author) {
        books.emplace_back(nextId++, title, author);
        cout << "Book added: " << title << endl;
    }

    void displayBooks() {
        if (books.empty()) {
            cout << "No books in the library." << endl;
            return;
        }
        for (const auto& book : books) {
            cout << "ID: " << book.id << ", Title: " << book.title << ", Author: " << book.author << endl;
        }
    }

    void updateBook(int id, const string& newTitle, const string& newAuthor) {
        for (auto& book : books) {
            if (book.id == id) {
                book.title = newTitle;
                book.author = newAuthor;
                cout << "Book updated: " << newTitle << endl;
                return;
            }
        }
        cout << "Book with ID " << id << " not found." << endl;
    }

    void deleteBook(int id) {
        for (auto it = books.begin(); it != books.end(); ++it) {
            if (it->id == id) {
                books.erase(it);
                cout << "Book with ID " << id << " deleted." << endl;
                return;
            }
        }
        cout << "Book with ID " << id << " not found." << endl;
    }
};

int main() {
    Library library;
    int choice;

    do {
        cout << "\nLibrary Management System" << endl;
        cout << "1. Add Book" << endl;
        cout << "2. Display Books" << endl;
        cout << "3. Update Book" << endl;
        cout << "4. Delete Book" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string title, author;
                cout << "Enter title: ";
                cin.ignore(); // Clear newline character from input buffer
                getline(cin, title);
                cout << "Enter author: ";
                getline(cin, author);
                library.addBook(title, author);
                break;
            }
            case 2:
                library.displayBooks();
                break;
            case 3: {
                int id;
                string newTitle, newAuthor;
                cout << "Enter book ID to update: ";
                cin >> id;
                cout << "Enter new title: ";
                cin.ignore();
                getline(cin, newTitle);
                cout << "Enter new author: ";
                getline(cin, newAuthor);
                library.updateBook(id, newTitle, newAuthor);
                break;
            }
            case 4: {
                int id;
                cout << "Enter book ID to delete: ";
                cin >> id;
                library.deleteBook(id);
                break;
            }
            case 5:
                cout << "Exiting the system." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 5);

    return 0;
}
